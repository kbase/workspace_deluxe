/*
 * This file was generated by the Gradle 'init' task.
 */

// TODO TEST switch to Kotlin DSL which is now the default and apparently better
// TODO TEST avoid early configuration, see
//           https://docs.gradle.org/current/userguide/task_configuration_avoidance.html
//           need to avoid withType as well apparently?

plugins {
	id 'java'
	id 'war'
	id 'jacoco'
	id 'maven-publish'
	id 'org.ajoberstar.grgit' version '4.1.1'
	id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'com.github.kbase'

var VER_JAVA_COMMON = "0.3.0"
var VER_AUTH2_CLIENT = "0.5.0"
var VER_AUTH2_SHADOW = "0.7.1"
var VER_JACKSON = "2.9.9"


var DEFAULT_URL = "https://ci.kbase.us/services/ws"

var BUILD_DOC_ROOT = "$buildDir/docs/"
var BUILD_JAVA_DOC_DIR = "$BUILD_DOC_ROOT/javadoc"
var BUILD_OTHER_DOC_DIR = "$BUILD_DOC_ROOT/otherdoc/"
// This is where the DocServer will look for docs, if it changes it needs to change
// in deploy.cfg as well
// TODO DOCS just get rid of configuring this in the DocServer, make things hardcoded
//           or pass in constructor when we subume into a Jersey style service
var IN_JAR_DOC_DIR = "/server_docs"
var IN_JAR_JAVA_DOC_DIR = "$IN_JAR_DOC_DIR/javadoc"

var LOC_WS_SPEC = "$rootDir/workspace.spec"
var LOC_DOC_HTML = "$rootDir/docshtml"

repositories {
	mavenCentral()
	maven {
		name = "Jitpack"
		url = 'https://jitpack.io'
	}
	maven {
		name = "Clojars"
		url = "https://repo.clojars.org/"
	}
}

task buildGitCommitFile {
	doLast {
		def commitId = grgit.head().id
		// is there a variable for builddir/classes/java/main?
		file("$buildDir/classes/java/main/us/kbase/workspace/gitcommit/gitcommit").text = commitId
	}
}

compileJava {
	// build needs to be java 8 compatible so jars can be used in java 8 projects
	// TODO BUILD remove when we no longer support java 8, use `options.release = 11` if needed
	java.sourceCompatibility = JavaVersion.VERSION_1_8
	java.targetCompatibility = JavaVersion.VERSION_1_8
	finalizedBy buildGitCommitFile
}

javadoc {
	/* We don't actually need the full javadoc for anything, so just hijack this task for
	 * building the client javadocs. If we ever need the full javadocs make a new task for the
	 * client java docs
	 */
	/* TODO DOCS the current sdk documentation looks like invalid html to javadoc
	 *           need to go through and remove
	 *           also some spots with < / > that need to be wrapped with {@code } in internal code
	 */
	failOnError = false
	options {
		links "https://docs.oracle.com/en/java/javase/11/docs/api/"
		links "https://javadoc.jitpack.io/com/github/kbase/auth2_client_java/$VER_AUTH2_CLIENT/javadoc/"
		links "https://javadoc.jitpack.io/com/github/kbase/java_common/$VER_JAVA_COMMON/javadoc/"
	}
	include "**/workspace/*.java"
	exclude "**/workspace/WorkspaceServer.java"
	include "**/common/service/Tuple*.java"
}

task buildDocs {
	// ideally we'd add the inputs and outputs spec but that's too much work for too little gain
	dependsOn javadoc
	doLast {
		// need to make sure we remove any docs that no longer exist in the source
		delete BUILD_OTHER_DOC_DIR
		// not needed locally, fails w/o it in docker build. *shrug*
		mkdir BUILD_OTHER_DOC_DIR
		copy {
			from LOC_WS_SPEC into BUILD_OTHER_DOC_DIR
		}
		copy {
			from LOC_DOC_HTML into BUILD_OTHER_DOC_DIR include "*"
		}
		exec {	
			commandLine "pod2html", "--infile=$rootDir/lib/Bio/KBase/workspace/Client.pm", "--outfile=$BUILD_OTHER_DOC_DIR/workspace_perl.html"
		}
		exec {
			commandLine "sphinx-build", "$rootDir/docsource/", BUILD_OTHER_DOC_DIR
		}
		delete fileTree(".").matching { include "pod2htm*.tmp" }
	}
}

tasks.withType(Test) {
	/* 
	 * TODO TEST Figure out why tests fail without this and remove. Might have something to do
	 * with the stfuLoggers() call in many of the tests, might kill logging for tests that
	 * require it
	 * Although it seems to make Mongo start up correctly as well which is odd
	 */
	forkEvery = 1
	/*
	  * TODO TEST split tests into mongo wrapper tests & all other tests (incl. integration).
	  * Set up GHA to run the non-mongo tests with a single version of mongo and run the
	  * mongo tests with matrixed mongo versions. Combine coverage at the end somehow
	*/
	systemProperty "test.cfg", "$rootDir/test.cfg"
	maxHeapSize = "3G"
	testLogging {
		exceptionFormat = 'full'
		showStandardStreams = true
	}
	filter {
		// gradle thinks that classes annotated with @RunWith are tests
		excludeTestsMatching "*Tester"
	}
}

tasks.withType(JacocoReport) {
	reports {
		xml.required = true
		csv.required = true
	}
}

test {
	finalizedBy jacocoTestReport
}

task testQuick(type: Test) {
	// for Gradle 9.0 compatibility
	testClassesDirs = testing.suites.test.sources.output.classesDirs
	classpath = testing.suites.test.sources.runtimeClasspath

	filter {
		excludeTestsMatching "*LongTest"
	}
	finalizedBy "jacocoTestQuickReport" // must be a string, see TODOs at head of file
}

task jacocoTestQuickReport(type: JacocoReport, dependsOn: testQuick) {
	sourceSets sourceSets.main
	executionData(testQuick)
}

shadowJar {
	// Be careful when updating jars - you may want to set the duplicates strategy to WARN
	// to see if any of the jars are shadowing the others when building the fat jar, which
	// has been the case in the past
	// Can't include the full documentation as jitpack doesn't have sphinx installed
	dependsOn javadoc
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	archiveAppendix = 'test-shadow'
	from sourceSets.test.output
	
	// don't shadow the shadow jar, don't need it and it's big
	dependencies {
		exclude(dependency("com.github.kbase:auth2:$VER_AUTH2_SHADOW"))
	}

	enableRelocation true
	relocationPrefix 'us.kbase.workspace.shadow'
	
	mergeServiceFiles()
	
	from(BUILD_JAVA_DOC_DIR) { into IN_JAR_JAVA_DOC_DIR }
	from(BUILD_OTHER_DOC_DIR) { into IN_JAR_DOC_DIR }
}

war {
	dependsOn buildDocs
	webXml = file('war/web.xml')
	from(BUILD_JAVA_DOC_DIR) { into "/WEB-INF/classes/$IN_JAR_JAVA_DOC_DIR" }
	from(BUILD_OTHER_DOC_DIR) { into "/WEB-INF/classes/$IN_JAR_DOC_DIR" }
}

// This is a filthy hack to get jitpack.io to not try to build the war file.
// Since the war depends on buildDocs which depends on sphinx, the build will fail
// It'd be better if it didn't call assemble and just publishToMavenLocal,
// but no such luck
gradle.taskGraph.whenReady { taskGraph ->
    def tasks = taskGraph.getAllTasks()
    if (tasks.find {it.name == 'assemble'}) {
        tasks.findAll {it.name == 'war' || it.name == "buildDocs"}.each { task ->
            task.enabled = false
        }
    }
}

/* SDK compile notes:
 * kb-sdk starts a docker container in interactive mode. Gradle's commandLine doesn't allocate
 * a tty so the command fails.
 * I tried using a ProcessBuilder and
 * https://docs.oracle.com/en%2Fjava%2Fjavase%2F11%2Fdocs%2Fapi%2F%2F/java.base/java/lang/ProcessBuilder.html#inheritIO()
 * but that failed also with no useful output.
 * 
 * The current solution is to precede the kb-sdk call with a script call, which either
 * allocates a tty or fools kb-sdk into thinking there is one - not quite sure.
 * https://man7.org/linux/man-pages/man1/script.1.html
 * I tried to redirect the script log file  to /dev/null with -O and --log-out but script didn't
 * recognize either option, hence the delete.
 *
 * This is, generally speaking, a janky mess and if someone can find a better way to do this
 * that'd be fantastic.
 */
 
 var LOC_SCRIPT_TYPESCRIPT = "./typescript"

// TODO GRADLE is there some way to DRY these 3 compile tasks up? Not a huge deal
task sdkCompileHTML {
	// We want to check in the HTML so we don't put it in the build dir
	var cmd = "kb-sdk compile --html --out $LOC_DOC_HTML $LOC_WS_SPEC"
	doLast {
		exec {
			commandLine "script", "-qefc", cmd
		}
		delete LOC_SCRIPT_TYPESCRIPT
	}
}

task sdkCompileLibs {
	var cmd = "kb-sdk compile " +
				"--out $rootDir/lib " +
				"--jsclname javascript/workspace/Client " +
				"--plclname Bio::KBase::workspace::Client " +
				"--pyclname biokbase.workspace.client " +
				"--url $DEFAULT_URL " + 
				LOC_WS_SPEC
	doLast {
		exec {
			commandLine "script", "-qefc", cmd
		}
		delete LOC_SCRIPT_TYPESCRIPT
		delete "$rootDir/lib/biokbase/workspace/authclient.py"
	}
}

task sdkCompileJava {
	// TODO GRADLE is there a variable for src/main/java?
	var cmd = "kb-sdk compile " +
				"--java " +
				"--javasrc ${project.projectDir}/src/main/java/ " +
				"--javasrv " +
				"--out . " +
				"--url $DEFAULT_URL " + 
				LOC_WS_SPEC
	doLast {
		exec {
			commandLine "script", "-qefc", cmd
		}
		delete LOC_SCRIPT_TYPESCRIPT
	}
}

task sdkCompile {
	dependsOn sdkCompileHTML
	dependsOn sdkCompileJava
	dependsOn sdkCompileLibs
}

task generateUpdateSchemaScript {
	dependsOn compileJava
	doLast {
		def dependencies = configurations.runtimeClasspath.collect { File file ->
			file.absolutePath
		}
	
		def classpath = dependencies.join(':')
	
		def scriptContent = """#!/bin/sh

CLASSPATH=$classpath

java -cp $buildDir/classes/java/main:\$CLASSPATH us.kbase.workspace.kbase.SchemaUpdaterCLI \$@
"""
		def outfile = "$buildDir/update_workspace_database_schema"
		file(outfile).text = scriptContent
		file(outfile).setExecutable(true)
	}
}

task buildAll {
	dependsOn buildDocs
	dependsOn jar
	dependsOn war
	dependsOn shadowJar
	dependsOn generateUpdateSchemaScript
}

configurations {
	// can't directly access testImplementation, so extend and access
	testimpl.extendsFrom testImplementation
}

publishing {
	publications {
		shadow(MavenPublication) { publication ->
			project.shadow.component(publication)
			artifactId = "workspace_deluxe-test-shadow-all"
		}
	}
}

dependencies {

	// ### General application dependencies ###
	
	implementation 'ch.qos.logback:logback-classic:1.1.2'
	implementation 'com.github.ben-manes.caffeine:caffeine:2.9.3'
	implementation "com.github.kbase:auth2_client_java:$VER_AUTH2_CLIENT"
	implementation("com.github.kbase:handle_service2:1.0.6") {
		exclude group: 'net.java.dev.jna' // breaks shadow jar
	}
	implementation "com.github.kbase:java_kidl:0.1.0"
	implementation("com.github.kbase:sample_service:0.2.6") {
		exclude group: 'net.java.dev.jna' // breaks shadow jar
	}
	implementation "com.github.kbase:shock_java_client:0.2.0"
	implementation 'com.google.guava:guava:14.0.1'
	implementation 'commons-codec:commons-codec:1.8'
	implementation 'commons-io:commons-io:2.4'
	implementation "com.fasterxml.jackson.core:jackson-annotations:$VER_JACKSON"
	implementation "com.fasterxml.jackson.core:jackson-databind:$VER_JACKSON"
	implementation 'info.picocli:picocli:4.6.1'
	implementation 'org.apache.commons:commons-lang3:3.1'
	implementation 'org.apache.httpcomponents:httpclient:4.5.9'
	implementation 'org.apache.kafka:kafka-clients:2.1.0'
	implementation 'org.ini4j:ini4j:0.5.2'
	implementation 'org.mongodb:bson:4.11.1'
	implementation 'org.mongodb:bson-record-codec:4.11.1'
	implementation 'org.mongodb:mongodb-driver-core:4.11.1'
	implementation 'org.mongodb:mongodb-driver-sync:4.11.1'
	implementation 'org.slf4j:slf4j-api:1.7.30'
	
	// ### Server dependencies for java_common JsonServerServlet & WorkspaceServer ###
	
	implementation("com.github.kbase:java_common:$VER_JAVA_COMMON") {
		exclude group: 'net.java.dev.jna' // breaks shadow jar
	}
	// TODO DEPS Need to rework the java common logger to not use syslog4j at all since it's
	// abandonware and has a ton of CVEs, even in the newer versions.
	implementation "org.syslog4j:syslog4j:0.9.46"
	implementation 'javax.annotation:javax.annotation-api:1.3.2'
	implementation 'javax.servlet:servlet-api:2.5'
	// this is OOOOOOLD. But that probably means updating java_common
	implementation 'org.eclipse.jetty.aggregate:jetty-all:7.0.0.v20091005'

	// ### Amazon S3 ###
	
	implementation('software.amazon.awssdk:s3:2.17.214') {
		exclude module: 'apache-client'
		exclude module: 'netty-nio-client'
	}
	implementation 'software.amazon.awssdk:url-connection-client:2.17.214'
	
	// ### Test ###
	
	testImplementation 'com.arangodb:arangodb-java-driver:6.7.2'
	testImplementation 'com.github.kbase:java_test_utilities:0.1.0'
	testImplementation "com.github.kbase:auth2:$VER_AUTH2_SHADOW"
	testImplementation 'com.github.zafarkhaja:java-semver:0.9.0'
	testImplementation 'junit:junit:4.12'
	testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.1.10'
	testImplementation 'org.mockito:mockito-core:3.0.0'
}

task showTestClassPath {
	doLast {
		configurations.testimpl.each { println it }
	}
}
