<project name="Workspace Service" default="test" basedir="."
  xmlns:jacoco="antlib:org.jacoco.ant">

  <description>
      Build file for the Workspace Service
  </description>

  <!-- set global properties for this build -->
  <property name="package" value="workspace service"/>
  <property name="src" location="src"/>
  <property name="lib" location="lib"/>
  <property name="dist" location="dist"/>
  <property name="test" location="test"/>
  <property name="jardir" location="../jars/lib/jars/"/>
  <property name="doc" location="docs/javadoc"/>
  <property name="doc_server_doc_loc" location="/server_docs"/>
  <property name="tempunpack" location="unpackedjars"/>
  <property name="classes" location="classes"/>
  <property name="client_classes" location="client_classes"/>
  <property name="jar.file" value="WorkspaceService.jar"/>
  <property name="war.file" value="WorkspaceService.war"/>
  <property name="clientjar.file" value="WorkspaceClient.jar"/>
  <property name="war.dir" value="war"/>
  <property name="test.reports.dir" location="test-reports"/>

  <fileset dir="${jardir}" id="sourceslib">
    <include name="kbase/common/kbase-common-0.1.0.jar"/>
  </fileset>

  <fileset dir="${jardir}" id="serverlib">
    <include name="ini4j/ini4j-0.5.2.jar"/>
    <include name="jetty/jetty-all-7.0.0.jar"/>
    <include name="jna/jna-3.4.0.jar"/>
    <include name="servlet/servlet-api-2.5.jar"/>
    <include name="syslog4j/syslog4j-0.9.46.jar"/>
    <include name="joda/joda-time-2.2.jar"/>
    <include name="annotation/javax.annotation-api-1.3.2.jar"/>
  </fileset>

  <fileset dir="${jardir}" id="clientserverlib">
    <include name="junit/junit-4.12.jar"/>
    <include name="hamcrest/hamcrest-core-1.3.jar"/>
    <include name="kbase/common/kbase-common-0.1.0.jar"/>
    <include name="kbase/auth/kbase-auth-0.4.4.jar"/>
    <include name="jackson/jackson-annotations-2.9.9.jar"/>
    <include name="jackson/jackson-core-2.9.9.jar"/>
    <include name="jackson/jackson-databind-2.9.9.jar"/>
    <include name="${commonjar}"/>
  </fileset>

  <fileset dir="${jardir}" id="shocklib">
    <include name="kbase/shock/shock-client-0.1.0.jar"/>
    <include name="apache_commons/commons-logging-1.1.1.jar"/>
    <include name="apache_commons/http/httpclient-4.5.9.jar"/>
    <include name="apache_commons/http/httpcore-4.4.5.jar"/>
    <include name="apache_commons/http/httpmime-4.5.8.jar"/>
  </fileset>

  <fileset dir="${jardir}" id="applicationlib">
    <include name="kbase/kidl/kbase-kidl-parser-1409261812-7863aef.jar"/>
    <include name="apache_commons/commons-codec-1.8.jar"/>
    <include name="apache_commons/commons-io-2.4.jar"/>
    <include name="apache_commons/commons-lang3-3.1.jar"/>
    <include name="mongo/mongo-java-driver-3.8.2.jar"/>
    <include name="slf4j/slf4j-api-1.7.7.jar"/>
    <include name="logback/logback-core-1.1.2.jar"/>
    <include name="logback/logback-classic-1.1.2.jar"/>
    <include name="google/guava-14.0.1.jar"/>
    <include name="kafka/kafka-clients-2.1.0.jar"/>
    <include name="kbase/handle/AbstractHandleClient-1.0.0.jar"/>
    <include name="kbase/sample/SampleServiceClient-0.1.0-alpha22.jar"/>
  </fileset>

  <fileset dir="${jardir}" id="s3lib">
    <include name="amazon/V2/annotations-2.14.25.jar"/>
    <include name="amazon/V2/arns-2.14.25.jar.jar"/>
    <include name="amazon/V2/auth-2.14.25.jar"/>
    <include name="amazon/V2/aws-core-2.14.25.jar"/>
    <include name="amazon/V2/aws-query-protocol-2.14.25.jar"/>
    <include name="amazon/V2/aws-xml-protocol-2.14.25.jar"/>
    <include name="amazon/V2/eventstream-1.0.1.jar"/>
    <include name="amazon/V2/http-client-spi-2.14.25.jar"/>
    <include name="amazon/V2/metrics-spi-2.14.25.jar"/>
    <include name="amazon/V2/profiles-2.14.25.jar"/>
    <include name="amazon/V2/protocol-core-2.14.25.jar"/>
    <include name="amazon/V2/regions-2.14.25.jar"/>
    <include name="amazon/V2/s3-2.14.25.jar"/>
    <include name="amazon/V2/sdk-core-2.14.25.jar"/>
    <include name="amazon/V2/url-connection-client-2.14.25.jar"/>
    <include name="amazon/V2/utils-2.14.25.jar"/>
    <include name="reactivestreams/reactive-streams-1.0.3.jar"/>
  </fileset>

  <fileset dir="${jardir}" id="testlib">
    <include name="apache_commons/velocity-1.7.jar"/>
    <include name="apache_commons/commons-lang-2.4.jar"/>
    <include name="apache_commons/commons-collections-3.2.1.jar"/>
    <include name="jsemver/java-semver-0.9.0.jar"/>
    <include name="equalsverifier/equalsverifier-3.1.10.jar"/>
    <include name="kbase/auth2/kbase-auth2test-0.2.4.jar"/>
    <include name="arangodb/arangodb-java-driver-6.7.2.jar"/>
    <include name="arangodb/velocypack-2.4.0.jar"/>
    <!-- mockito and dependencies -->
    <include name="mockito/mockito-core-3.0.0.jar"/>
    <include name="bytebuddy/byte-buddy-1.9.10.jar"/>
    <include name="bytebuddy/byte-buddy-agent-1.9.10.jar"/>
    <include name="objenesis/objenesis-2.6.jar"/>
  </fileset>

  <union id="serverside">
    <fileset refid="serverlib"/>
    <fileset refid="clientserverlib"/>
    <fileset refid="shocklib"/>
    <fileset refid="applicationlib"/>
    <fileset refid="s3lib"/>
    <fileset refid="testlib"/>
  </union>

  <fileset id="client-jdoc-files" dir="${src}/us/kbase" defaultexcludes="yes">
    <include name="workspace/*.java"/>
    <exclude name="workspace/WorkspaceServer.java"/>
    <include name="common/service/*.java"/>
    <exclude name="common/service/JsonServer*"/>
    <exclude name="common/service/JacksonTupleModule.java"/>
    <exclude name="common/service/JsonClientCaller.java"/>
    <exclude name="common/service/JsonTreeTraversingParser.java"/>
    <exclude name="common/service/KBaseJsonParser.java"/>
  </fileset>

  <fileset id="sources-jdoc-files" dir="${tempunpack}/us/kbase/common/service"
    defaultexcludes="yes">
    <include name="UObject.java"/>
    <include name="JsonTokenStream.java"/>
    <include name="*Exception.java"/>
  </fileset>

  <fileset id="client-class-files" dir="${classes}" defaultexcludes="yes">
    <include name="us/kbase/workspace/*.class"/>
    <exclude name="us/kbase/workspace/WorkspaceServer.class"/>
    <include name="us/kbase/common/service/*.class"/>
    <exclude name="us/kbase/common/service/JsonServer*"/>
  </fileset>

  <path id="compile.classpath">
    <union refid="serverside"/>
  </path>

  <path id="test.client.import.classpath">
    <fileset refid="clientserverlib"/>
    <fileset file="${dist}/client/${clientjar.file}"/>
    <pathelement path="${test}"/>
  </path>

  <path id="test.classpath">
    <fileset file="${dist}/${jar.file}"/>
    <path refid="compile.classpath"/>
  </path>

  <target name="init" description="make directories">
    <!-- Create the output directory structure-->
    <mkdir dir="${classes}"/>
    <mkdir dir="${dist}"/>
    <mkdir dir="${test.reports.dir}"/>
    <mkdir dir="${test.reports.dir}/html"/>
  </target>

  <target name="compile_client" description="compile only the client">
    <mkdir dir="${client_classes}"/>
    <javac destdir="${client_classes}" includeantruntime="false" target="1.6" source="1.6"
      debug="true" classpathref="compile.classpath">
      <src path="${src}"/>
      <exclude name="AllWorkspaceTestsRunner.java"/>
      <exclude name="us/kbase/typedobj/**"/>
      <exclude name="us/kbase/common/**"/>
      <exclude name="us/kbase/workspace/WorkspaceServer.java"/>
      <exclude name="us/kbase/workspace/database/**"/>
      <exclude name="us/kbase/workspace/docserver/**"/>
      <exclude name="us/kbase/workspace/exceptions/**"/>
      <exclude name="us/kbase/workspace/kbase/**"/>
      <exclude name="us/kbase/workspace/test/**"/>
      <exclude name="us/kbase/workspace/lib/**"/>
    </javac>
    <jar destfile="${dist}/client/${clientjar.file}" basedir="${client_classes}"/>
    <delete dir="${client_classes}"/>
  </target>

  <target name="compile" depends="init" description="compile the source">
    <!-- Compile class files-->
    <javac destdir="${classes}" includeantruntime="false"
      target="1.8" source="1.8"
      debug="true" classpathref="compile.classpath">
      <src path="${src}"/>
    </javac>
    <!-- Copy resource files-->
    <copy todir="${classes}">
      <fileset dir="${src}">
        <patternset>
          <include name="**/*.properties"/>
          <include name="**/*.cfg"/>
          <include name="**/*.spec"/>
          <include name="**/*.instance.*"/>
          <include name="**/instance.*"/>
          <include name="**/*.instance"/>
          <include name="**/*.html"/>
          <include name="**/*.css"/>
          <include name="**/*.gif"/>
          <include name="**/*.js"/>
          <include name="**/*.png"/>
          <include name="**/*.txt"/>
          <include name="**/*.weirdsuffix"/>
        </patternset>
      </fileset>
    </copy>
    <!-- Make main jar file-->
    <jar destfile="${dist}/${jar.file}" basedir="${classes}"/>
    <!-- make the client jar-->
    <jar destfile="${dist}/client/${clientjar.file}">
      <fileset refid="client-class-files"/>
    </jar>
  </target>

  <target name="buildwar" description="build the WAR file. Assumes compile has been run">
    <!-- make the war file for the server-->
    <mkdir dir="${war.dir}/lib"/>
    <copy todir="${war.dir}/lib/" flatten="true">
      <union refid="serverside"/>
    </copy>
    <mkdir dir="workspace_docs/${doc_server_doc_loc}"/>
    <copy todir="workspace_docs/${doc_server_doc_loc}">
      <fileset dir="docs"/>
    </copy>
    <war destfile="${dist}/${war.file}" webxml="${war.dir}/web.xml">
      <classes dir="${classes}"/>
      <lib dir="${war.dir}/lib/"/>
      <classes dir="workspace_docs"/>
    </war>
    <delete dir="${war.dir}/lib"/>
    <delete dir="workspace_docs"/>
  </target>

  <target name="javadoc" description="build javadocs">
    <unzip dest="${tempunpack}">
      <fileset refid="sourceslib"/>
    </unzip>
    <javadoc access="protected" author="false" classpathref="compile.classpath"
      destdir="${doc}" nodeprecated="false" nodeprecatedlist="false"
      noindex="false" nonavbar="false" notree="false"
      source="1.8" splitindex="true" use="true" version="true">
      <link href="http://download.oracle.com/javase/8/docs/api/"/>
      <link href="http://fasterxml.github.io/jackson-core/javadoc/2.2.0/"/>
      <link href="http://fasterxml.github.io/jackson-databind/javadoc/2.2.0/"/>
      <fileset refid="client-jdoc-files"/>
      <fileset refid="sources-jdoc-files"/>
    </javadoc>
    <delete dir="${tempunpack}"/>
  </target>

  <target name="test" depends="compile" description="run tests">
    <echo message="starting ${package} tests"/>
    <junit fork="yes" maxmemory="3G" failureproperty="test.failed">
      <classpath refid="test.classpath"/>
      <formatter type="plain" usefile="false" />
      <sysproperty key="test.cfg" value="./test.cfg"/>
      <batchtest>
        <fileset dir="${src}">
          <include name="**/test/**/**Test.java"/>
        </fileset>
      </batchtest>
    </junit>
    <fail message="Test failure detected, check test results." if="test.failed" />
  </target>

  <path id="jacoco.classpath">
    <fileset dir="${jardir}">
      <include name="jacoco/org.jacoco.ant-0.8.4.jar"/>
      <include name="jacoco/org.jacoco.core-0.8.4.jar"/>
      <include name="jacoco/org.jacoco.report-0.8.4.jar"/>
      <include name="jacoco/org.jacoco.agent-0.8.4.jar"/>
      <include name="asm/asm-7.1.jar"/>
      <include name="asm/asm-commons-7.1.jar"/>
      <include name="asm/asm-analysis-7.1.jar"/>
      <include name="asm/asm-tree-7.1.jar"/>
    </fileset>
  </path>

  <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml"
    classpathref="jacoco.classpath"/>

  <target name="test_quick_coverage"
          depends="test_quick"
          description="run most tests and generate test report">
    <delete file="${test.reports.dir}/merged_jacoco.exec"/>
    <jacoco:merge destfile="${test.reports.dir}/merged_jacoco.exec">
      <fileset dir="${test.reports.dir}" includes="*.exec"/>
    </jacoco:merge>
    <jacoco:report>
      <executiondata>
        <file file="${test.reports.dir}/merged_jacoco.exec"/>
      </executiondata>
      <structure name="${package} Unit Tests">
        <classfiles>
          <fileset dir="${classes}">
            <exclude name="**/test/**"/>
          </fileset>
        </classfiles>
        <sourcefiles encoding="UTF-8">
          <fileset dir="${src}">
            <exclude name="**/test/**"/>
          </fileset>
        </sourcefiles>
      </structure>
      <html destdir="${test.reports.dir}/html"/>
      <csv destfile="${test.reports.dir}/coverage-report.csv"/>
      <xml destfile="${test.reports.dir}/coverage-report.xml"/>
    </jacoco:report>
  </target>

  <target name="test_quick"
      depends="compile"
      description="run tests other than the *LongTest.java tests">
    <echo message="starting ${package} tests"/>
    <delete file="${test.reports.dir}/ws.exec"/>
    <jacoco:coverage destfile="${test.reports.dir}/ws.exec"
         excludes="org/*:junit/*">
      <junit fork="yes" maxmemory="3G" failureproperty="test.failed">
        <classpath refid="test.classpath"/>
        <formatter type="plain" usefile="false" />
        <sysproperty key="test.cfg" value="./test.cfg"/>
        <batchtest>
          <fileset dir="${src}">
            <include name="**/test/**/**Test.java"/>
            <exclude name="**/test/**/**LongTest.java"/>
          </fileset>
        </batchtest>
      </junit>
    </jacoco:coverage>
    <fail message="Test failure detected, check test results." if="test.failed" />
  </target>

  <target name="test_quick_no_handle_coverage"
          depends="test_quick_no_handle"
          description="run most tests and generate test report">
    <delete file="${test.reports.dir}/merged_jacoco.exec"/>
    <jacoco:merge destfile="${test.reports.dir}/merged_jacoco.exec">
      <fileset dir="${test.reports.dir}" includes="*.exec"/>
    </jacoco:merge>
    <jacoco:report>
      <executiondata>
        <file file="${test.reports.dir}/merged_jacoco.exec"/>
      </executiondata>
      <structure name="${package} Unit Tests">
        <classfiles>
          <fileset dir="${classes}">
            <exclude name="**/test/**"/>
          </fileset>
        </classfiles>
        <sourcefiles encoding="UTF-8">
          <fileset dir="${src}">
            <exclude name="**/test/**"/>
          </fileset>
        </sourcefiles>
      </structure>
      <html destdir="${test.reports.dir}/html"/>
      <csv destfile="${test.reports.dir}/coverage-report.csv"/>
      <xml destfile="${test.reports.dir}/coverage-report.xml"/>
    </jacoco:report>
  </target>

  <target name="test_quick_no_handle"
      depends="compile"
      description="run tests other than the *LongTest.java and HandleAndShockTest tests">
    <echo message="starting ${package} tests"/>
    <delete file="${test.reports.dir}/ws.exec"/>
    <jacoco:coverage destfile="${test.reports.dir}/ws.exec"
         excludes="org/*:junit/*">
      <junit fork="yes" maxmemory="3G" failureproperty="test.failed">
        <classpath refid="test.classpath"/>
        <formatter type="plain" usefile="false" />
        <sysproperty key="test.cfg" value="./test.cfg"/>
        <batchtest>
          <fileset dir="${src}">
            <include name="**/test/**/**Test.java"/>
            <exclude name="**/test/**/**LongTest.java"/>
            <exclude name="**/test/**/HandleAndShockTest.java"/>
          </fileset>
        </batchtest>
      </junit>
    </jacoco:coverage>
    <fail message="Test failure detected, check test results." if="test.failed" />
  </target>

  <target name="test_client_import" depends="compile" description="make sure the client jar contains all files">
    <javac destdir="${test}" srcdir="${test}" includeantruntime="false" target="1.6" source="1.6"
          debug="true" classpathref="test.client.import.classpath">
      <src path="${test}"/>
      <exclude name="performance/**"/>
      <exclude name="debugging/**"/>
      <exclude name="sorting/**"/>
      <exclude name="s3presignedurl/**"/>
    </javac>
    <junit fork="yes" failureproperty="test.failed">
      <classpath refid="test.client.import.classpath"/>
      <formatter type="plain" usefile="false" />
      <test name="TestClientImport"/>
    </junit>
    <fail message="Test failure detected, check test results." if="test.failed" />
  </target>

  <target name="clean" description="clean up" >
    <!-- Clean up internal temporary files and folders-->
    <delete dir="${classes}"/>
    <delete dir="${dist}"/>
    <!--<delete dir="${test}"/>-->
  </target>
</project>

