/*
 * This file was generated by the Gradle "init" task.
 *
 * This is a general purpose Gradle build.
 */

// The Java plugin adds a number of tasks to your project, as shown below.

// compileJava — JavaCompile
// Depends on: All tasks which contribute to the compilation classpath, including jar tasks from projects that are on the classpath via project dependencies

// Compiles production Java source files using the JDK compiler.

// processResources — ProcessResources
// Copies production resources into the production resources directory.

// classes
// Depends on: compileJava, processResources

// This is an aggregate task that just depends on other tasks. Other plugins may attach additional compilation tasks to it.

// compileTestJava — JavaCompile
// Depends on: classes, and all tasks that contribute to the test compilation classpath

// Compiles test Java source files using the JDK compiler.

// processTestResources — Copy
// Copies test resources into the test resources directory.

// testClasses
// Depends on: compileTestJava, processTestResources

// This is an aggregate task that just depends on other tasks. Other plugins may attach additional test compilation tasks to it.

// jar — Jar
// Depends on: classes

// Assembles the production JAR file, based on the classes and resources attached to the main source set.

// javadoc — Javadoc
// Depends on: classes

// Generates API documentation for the production Java source using Javadoc.

// test — Test
// Depends on: testClasses, and all tasks which produce the test runtime classpath

// Runs the unit tests using JUnit or TestNG.

// clean — Delete
// Deletes the project build directory.

// cleanTaskName — Delete
// Deletes files created by the specified task. For example, cleanJar will delete the JAR file created by the jar task and cleanTest will delete the test results created by the test task.
// SourceSet Tasks

// For each source set you add to the project, the Java plugin adds the following tasks:

// compileSourceSetJava — JavaCompile
// Depends on: All tasks which contribute to the source set’s compilation classpath

// Compiles the given source set’s Java source files using the JDK compiler.

// processSourceSetResources — Copy
// Copies the given source set’s resources into the resources directory.

// sourceSetClasses — Task
// Depends on: compileSourceSetJava, processSourceSetResources

// Prepares the given source set’s classes and resources for packaging and execution. Some plugins may add additional compilation tasks for the source set.

// Lifecycle Tasks

// The Java plugin attaches some of its tasks to the lifecycle tasks defined by the Base Plugin — which the Java Plugin applies automatically — and it also adds a few other lifecycle tasks:

// assemble
// Depends on: jar, and all other tasks that create artifacts attached to the archives configuration

// Aggregate task that assembles all the archives in the project. This task is added by the Base Plugin.

// check
// Depends on: test

// Aggregate task that performs verification tasks, such as running the tests. Some plugins add their own verification tasks to check. You should also attach any custom Test tasks to this lifecycle task if you want them to execute for a full build. This task is added by the Base Plugin.

// build
// Depends on: check, assemble

// Aggregate tasks that performs a full build of the project. This task is added by the Base Plugin.

// buildNeeded
// Depends on: build, and buildNeeded tasks in all projects that are dependencies in the testRuntimeClasspath configuration.

// Performs a full build of the project and all projects it depends on.

// buildDependents
// Depends on: build, and buildDependents tasks in all projects that have this project as a dependency in their testRuntimeClasspath configurations

// Performs a full build of the project and all projects which depend upon it.

// buildConfigName — task rule
// Depends on: all tasks that generate the artifacts attached to the named — ConfigName — configuration

// Assembles the artifacts for the specified configuration. This rule is added by the Base Plugin.

plugins {
    id "java"
    id "war"
    id "jacoco"
    id "com.diffplug.spotless" version "6.15.0"
}

group = "workspace service"
version = "0.14.1"

ext {
    clientJarFile = "WorkspaceClient.jar"
    serviceJarFile = "WorkspaceService.jar"
    warFile = "WorkspaceService.war"
    warXml = "web.xml"
    // directories
    src = "src"
    dist = "dist"
    jarDir = "../jars/lib/jars"
    downloadDir = "$buildDir/download"
    coverageDir = "$buildDir/coverage"
    tempunpack = "$buildDir/tmp/unpackedjars"
    warDir = "war"
    // other config
    jackson_version = "2.9.9"
    testConfig = "test.cfg"
}

repositories {
    mavenCentral()
    maven {
        name = 'Clojars'
        url = 'https://repo.clojars.org/'
    }
}

configurations {
    implementation
    testImplementation
    runtimeDeps {
        extendsFrom implementation
    }
    allDeps {
        extendsFrom implementation, testImplementation
    }
}

// download the KBase jars if they aren't already present
task downloadJars {
    doLast {
        def dir = file(downloadDir)
        if (!dir.exists()) {
            dir.mkdirs()
        }
        def url = 'https://github.com/kbase/jars/raw/master/lib/jars/kbase/'
        def jars = [
            'auth/kbase-auth-0.4.4',
            'auth2/kbase-auth2test-0.2.4',
            'common/kbase-common-0.1.1',
            'handle/AbstractHandleClient-1.0.0',
            'kidl/kbase-kidl-parser-1409261812-7863aef',
            'sample/SampleServiceClient-0.1.1',
            'shock/shock-client-0.1.0'
        ]
        jars.each { jar ->
            def jarName = jar.split('/')[-1]
            def file = file("${downloadDir}/${jarName}.jar")
            if (!file.exists()) {
                ant.get(src: "${url}${jar}.jar", dest: "${downloadDir}/${jarName}.jar")
            }
        }
    }
}

dependencies {
    // downloaded jars
    // implementation fileTree(dir: "$downloadDir", include: ['*.jar'])

    // implementation "ch.qos.logback:logback-classic:1.1.2"
    // implementation "com.fasterxml.jackson.core:jackson-annotations:2.9.9"
    // implementation "com.fasterxml.jackson.core:jackson-core:2.9.9"
    // implementation "com.fasterxml.jackson.core:jackson-databind:2.9.9"
    // implementation "com.github.ben-manes.caffeine:caffeine:2.9.3"
    // implementation "com.google.guava:guava:14.0.1"
    // implementation "commons-codec:commons-codec:1.8"
    // implementation "commons-io:commons-io:2.4"
    // implementation "info.picocli:picocli:4.6.1"
    // implementation "javax.annotation:javax.annotation-api:1.3.2"
    // implementation "javax.servlet:servlet-api:2.5"
    // implementation "joda-time:joda-time:2.2"
    // implementation "org.apache.commons:commons-lang3:3.1"
    // implementation "org.apache.httpcomponents:httpclient:4.5.9"
    // implementation "org.apache.httpcomponents:httpmime:4.5.8"
    // implementation "org.apache.kafka:kafka-clients:2.1.0"
    // implementation "org.eclipse.jetty.aggregate:jetty-all:7.0.0.v20091005"
    // implementation "org.ini4j:ini4j:0.5.2"
    // implementation "org.mongodb:mongo-java-driver:3.12.10"
    // implementation "org.slf4j:slf4j-api:1.7.30"

    // // ### Amazon S3 ###

    // implementation("software.amazon.awssdk:s3:2.17.214") {
    //     exclude module: "apache-client"
    //     exclude module: "netty-nio-client"
    // }
    // implementation "software.amazon.awssdk:url-connection-client:2.17.214"

    // // testImplementation files("${jarDir}/jna/jna-3.4.0.jar")
    // implementation 'org.syslog4j:syslog4j:0.9.46'

    // // ### Test ###
    // testImplementation "com.arangodb:arangodb-java-driver:6.7.2"
    // testImplementation "com.github.zafarkhaja:java-semver:0.9.0"
    // testImplementation "junit:junit:4.12"
    // testImplementation "nl.jqno.equalsverifier:equalsverifier:3.1.10"
    // testImplementation "org.hamcrest:hamcrest-core:1.3"
    // testImplementation "org.mockito:mockito-core:3.0.0"


    implementation files("$jarDir/kbase/common/kbase-common-0.1.1.jar")
    implementation files("$jarDir/ini4j/ini4j-0.5.2.jar")
    implementation files("$jarDir/jetty/jetty-all-7.0.0.jar")
    implementation files("$jarDir/jna/jna-3.4.0.jar")
    implementation files("$jarDir/servlet/servlet-api-2.5.jar")
    implementation files("$jarDir/syslog4j/syslog4j-0.9.46.jar")
    implementation files("$jarDir/annotation/javax.annotation-api-1.3.2.jar")
    implementation files("$jarDir/junit/junit-4.12.jar")
    implementation files("$jarDir/hamcrest/hamcrest-core-1.3.jar")
    implementation files("$jarDir/kbase/common/kbase-common-0.1.1.jar")
    implementation files("$jarDir/joda/joda-time-2.2.jar")
    implementation files("$jarDir/kbase/auth/kbase-auth-0.4.4.jar")
    implementation files("$jarDir/jackson/jackson-annotations-2.9.9.jar")
    implementation files("$jarDir/jackson/jackson-core-2.9.9.jar")
    implementation files("$jarDir/jackson/jackson-databind-2.9.9.jar")
    implementation files("$jarDir/kbase/shock/shock-client-0.1.0.jar")
    implementation files("$jarDir/apache_commons/commons-logging-1.1.1.jar")
    implementation files("$jarDir/apache_commons/http/httpclient-4.5.9.jar")
    implementation files("$jarDir/apache_commons/http/httpcore-4.4.5.jar")
    implementation files("$jarDir/apache_commons/http/httpmime-4.5.8.jar")
    implementation files("$jarDir/kbase/kidl/kbase-kidl-parser-1409261812-7863aef.jar")
    implementation files("$jarDir/apache_commons/commons-codec-1.8.jar")
    implementation files("$jarDir/apache_commons/commons-io-2.4.jar")
    implementation files("$jarDir/apache_commons/commons-lang3-3.1.jar")
    implementation files("$jarDir/picocli/picocli-4.6.1.jar")
    implementation files("$jarDir/mongo/mongo-java-driver-3.12.10.jar")
    implementation files("$jarDir/slf4j/slf4j-api-1.7.30.jar")
    implementation files("$jarDir/logback/logback-core-1.1.2.jar")
    implementation files("$jarDir/logback/logback-classic-1.1.2.jar")
    implementation files("$jarDir/google/guava-14.0.1.jar")
    implementation files("$jarDir/caffeinecache/caffeine-2.9.3.jar")
    implementation files("$jarDir/kafka/kafka-clients-2.1.0.jar")
    implementation files("$jarDir/kbase/handle/AbstractHandleClient-1.0.0.jar")
    implementation files("$jarDir/kbase/sample/SampleServiceClient-0.1.1.jar")
    implementation files("$jarDir/amazon/V2/annotations-2.17.214.jar")
    implementation files("$jarDir/amazon/V2/arns-2.17.214.jar")
    implementation files("$jarDir/amazon/V2/auth-2.17.214.jar")
    implementation files("$jarDir/amazon/V2/aws-core-2.17.214.jar")
    implementation files("$jarDir/amazon/V2/aws-query-protocol-2.17.214.jar")
    implementation files("$jarDir/amazon/V2/aws-xml-protocol-2.17.214.jar")
    implementation files("$jarDir/amazon/V2/eventstream-1.0.1.jar")
    implementation files("$jarDir/amazon/V2/http-client-spi-2.17.214.jar")
    implementation files("$jarDir/amazon/V2/json-utils-2.17.214.jar")
    implementation files("$jarDir/amazon/V2/metrics-spi-2.17.214.jar")
    implementation files("$jarDir/amazon/V2/profiles-2.17.214.jar")
    implementation files("$jarDir/amazon/V2/protocol-core-2.17.214.jar")
    implementation files("$jarDir/amazon/V2/regions-2.17.214.jar")
    implementation files("$jarDir/amazon/V2/s3-2.17.214.jar")
    implementation files("$jarDir/amazon/V2/sdk-core-2.17.214.jar")
    implementation files("$jarDir/amazon/V2/third-party-jackson-core-2.17.214.jar")
    implementation files("$jarDir/amazon/V2/url-connection-client-2.17.214.jar")
    implementation files("$jarDir/amazon/V2/utils-2.17.214.jar")
    implementation files("$jarDir/reactivestreams/reactive-streams-1.0.3.jar")

    // TEST
    testImplementation files("$jarDir/apache_commons/commons-collections-3.2.1.jar")
    testImplementation files("$jarDir/apache_commons/commons-lang-2.4.jar")
    testImplementation files("$jarDir/apache_commons/velocity-1.7.jar")
    testImplementation files("$jarDir/arangodb/arangodb-java-driver-6.7.2.jar")
    testImplementation files("$jarDir/arangodb/velocypack-2.4.0.jar")
    testImplementation files("$jarDir/bytebuddy/byte-buddy-1.9.10.jar")
    testImplementation files("$jarDir/bytebuddy/byte-buddy-agent-1.9.10.jar")
    testImplementation files("$jarDir/equalsverifier/equalsverifier-3.1.10.jar")
    testImplementation files("$jarDir/jsemver/java-semver-0.9.0.jar")
    testImplementation files("$jarDir/kbase/auth2/kbase-auth2test-0.2.4.jar")
    testImplementation files("$jarDir/mockito/mockito-core-3.0.0.jar")
    testImplementation files("$jarDir/objenesis/objenesis-2.6.jar")
}

sourceSets {
    main {
        java {
            srcDir src

// java.destinationDirectory — DirectoryProperty
// Default value: $buildDir/classes/java/$name, e.g. build/classes/java/main

// output — (read-only) SourceSetOutput
// The output files of the source set, containing its compiled classes and resources.

// output.classesDirs — (read-only) FileCollection
// Default value: $buildDir/classes/java/$name, e.g. build/classes/java/main
// The directories to generate the classes of this source set into. May contain directories for other JVM languages, e.g. build/classes/kotlin/main.

// output.resourcesDir — File
// Default value: $buildDir/resources/$name, e.g. build/resources/main
// The directory to generate the resources of this source set into.


            exclude "**/test/**"
        }
        // resources {
        //     srcDir src
        //     include "**/*.properties"
        //     include "**/*.cfg"
        //     include "**/*.spec"
        //     include "**/*.instance.*"
        //     include "**/instance.*"
        //     include "**/*.instance"
        //     include "**/*.html"
        //     include "**/*.css"
        //     include "**/*.gif"
        //     include "**/*.js"
        //     include "**/*.png"
        //     include "**/*.txt"
        //     include "**/*.weirdsuffix"
        // }
    }
    test {
        java {
            srcDir src
            // include "**/test/**"
            // exclude "*Tester.java"
        }
        // compileClasspath += main.output + test.output
        // runtimeClasspath += main.output + test.output
        resources {
            srcDir src
            include "**/*.properties"
            include "**/*.cfg"
            include "**/*.spec"
            include "**/*.instance.*"
            include "**/instance.*"
            include "**/*.instance"
            include "**/*.html"
            include "**/*.css"
            include "**/*.gif"
            include "**/*.js"
            include "**/*.png"
            include "**/*.txt"
            include "**/*.weirdsuffix"
        }
     }
}

tasks.withType(JavaCompile) {
    dependsOn(downloadJars)
    classpath = configurations.allDeps
    options.compilerArgs = ['-source', '11', '-target', '11', '-g']
}

task clientJar(type: Jar, dependsOn: compileJava) {
    from sourceSets.main.output
    include "us/kbase/workspace/*.class"
    exclude "us/kbase/workspace/WorkspaceServer.class"
    include "us/kbase/common/service/*.class"
    exclude "us/kbase/common/service/JsonServer*"
    archiveFileName = clientJarFile
    destinationDirectory = file("$dist/client")
}

task serviceJar(type: Jar, dependsOn: compileJava) {
    from sourceSets.main.output
    archiveFileName = serviceJarFile
    destinationDirectory = file("$dist")
}

task buildJars {
    dependsOn serviceJar, clientJar
}

task unzipJar(type: Copy, dependsOn: [downloadJars]) {
    from zipTree("${downloadDir}/kbase-common-0.1.1.jar")
    into "$tempunpack"
}

// by default, the files go into build/docs/javadoc
tasks.javadoc {
    dependsOn unzipJar
    classpath = configurations.allDeps
    failOnError = false
    options {
        author = false
        noDeprecated = false
        noDeprecatedList = false
        noIndex = false
        noNavBar = false
        noTree = false
        splitIndex = true
        use = true
        version = true
        links = [
            "http://download.oracle.com/javase/11/docs/api/",
            "https://www.javadoc.io/doc/com.fasterxml.jackson.core/jackson-core/2.9.9/",
            "https://www.javadoc.io/doc/com.fasterxml.jackson.core/jackson-databind/2.9.9/"
        ]
    }
    source = fileTree(dir: "$src/us/kbase",
    include: [
        "workspace/*.java",
        "common/service/*.java"
    ],
    exclude: [
        "workspace/WorkspaceServer.java",
        "common/service/JsonServer*",
        "common/service/JacksonTupleModule.java",
        "common/service/JsonClientCaller.java",
        "common/service/JsonTreeTraversingParser.java",
        "common/service/KBaseJsonParser.java"
    ])
    source += fileTree(dir: "$tempunpack/us/kbase/common/service", include: [
        "UObject.java",
        "JsonTokenStream.java",
        "*Exception.java"
    ])

    doLast {
        delete "$tempunpack"
    }
}

tasks.war {
    dependsOn javadoc
    description = "Build the WAR file. Assumes compilation has been run."
    // set the WAR file name and output directory
    archiveFileName = warFile
    destinationDirectory = file("$dist")

    // location of the web.xml file
    webXml = file("${warDir}/${warXml}")

    duplicatesStrategy 'exclude'

    // add the dependencies to lib
    into('WEB-INF/lib') {
        from sourceSets.main.compileClasspath
    }
    // copy the compiled classes over
    into('WEB-INF/classes') {
        from sourceSets.main.output.classesDirs
    }
    // copy in the documentation
    into('WEB-INF/classes/server_docs/javadoc') {
        from javadoc.destinationDir
    }
}

task expandWar(type: Copy) {
    // dependsOn buildWar
    from zipTree("$dist/$warFile")
    into "war_contents"
}

// reports of the tests are saved to
// build/reports/tests/<testName>
tasks.withType(Test) {
    dependsOn compileTestJava
    useJUnit()
    systemProperty "test.cfg", testConfig
    maxHeapSize = "3G"
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "short"
        showStandardStreams = true
        showExceptions = true
        showCauses = true
    }
}

task testProvenance(type: Test) {
    description = "run all tests marked as Provenance tests"
    systemProperty "test.cfg", testConfig
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    options {
        includeCategories "us.kbase.common.test.ProvenanceTests"
    }
}

task testMongo(type: Test) {
    description = "run all tests marked as Mongo tests"
    systemProperty "test.cfg", testConfig
    options {
        includeCategories "us.kbase.common.test.MongoTests"
        excludeCategories "us.kbase.common.test.SlowTests", "us.kbase.common.test.TestHelpers"
    }
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "short"
        showStandardStreams = true
        showExceptions = true
        showCauses = true
    }
}

task testQuick(type: Test) {
    description = "run the non-Mongo, non-long tests"
    systemProperty "test.cfg", testConfig
    options {
        excludeCategories "us.kbase.common.test.MongoTests", "us.kbase.common.test.SlowTests", "us.kbase.common.test.TestHelpers"
    }
}

task testSlow(type: Test) {
    description = "run the non-Mongo, non-long tests"
    systemProperty "test.cfg", testConfig
    maxHeapSize = "3G"
    options {
        includeCategories "us.kbase.common.test.SlowTests"
        excludeCategories "us.kbase.common.test.TestHelpers"
    }
}

task noLongTests(type: Test) {
    description = "run all tests except the long tests"
    systemProperty "test.cfg", testConfig
    // forkEvery 1
    options {
        excludeCategories "us.kbase.common.test.SlowTests", "us.kbase.common.test.TestHelpers"
    }
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "short"
        showStandardStreams = true
        showExceptions = true
        showCauses = true
    }
}

// by default, the output from these tasks is saved to
// build/reports/jacoco/<testName>
tasks.withType(JacocoReport) {
    reports {
        html.required = true
        xml.required = true
        csv.required = true
    }
    sourceSets sourceSets.main
}

task coverageProvenance(type: JacocoReport, dependsOn: testProvenance) {
    group = "Reporting"
    description = "Generate Jacoco code coverage report for Provenance tests"
    executionData(testProvenance)
    // reports {
    //     html.required = true
    //     xml.required = true
    // }
    // sourceSets sourceSets.main
}


task coverageMongo(type: JacocoReport, dependsOn: testMongo) {
    group = "Reporting"
    description = "Generate Jacoco code coverage report for Mongo tests"
    executionData(testMongo)
    // reports {
    //     html.required = true
    //     xml.required = true
    // }
    // sourceSets sourceSets.main
}

task coverageQuick(type: JacocoReport, dependsOn: testQuick) {
    group = "Reporting"
    description = "Generate Jacoco code coverage report for quick tests"
    executionData(testQuick)
    // reports {
    //     html.required = true
    //     xml.required = true
    //     csv.required = true
    // }
    // sourceSets sourceSets.main
}

task coverageSlow(type: JacocoReport, dependsOn: testSlow) {
    group = "Reporting"
    description = "Generate Jacoco code coverage report for slow tests"
    executionData(testSlow)
}

task coverageNoLongTests(type: JacocoReport, dependsOn: noLongTests) {
    group = "Reporting"
    description = "Generate code coverage reports for the tests"
    executionData(noLongTests)
    // reports {
    //     html.required = true
    //     csv.required = true
    //     xml.required = true
    // }
}


task combineCoverage(type: JacocoReport) {
    group = "Reporting"
    description = "Generate combined Jacoco code coverage report for any tests that have been run"
    reports {
        html.required = true
        csv.required = true
        xml.required = true
    }
    executionData fileTree(project.rootDir.absolutePath).include("${project.buildDir}/jacoco/*.exec")
    sourceSets sourceSets.main
}

task createScript {
    dependsOn compileJava
    description = "create cli script"

    def libClasspath = configurations.runtimeDeps.files.join(":")
    file("update_workspace_database_schema").write("#!/bin/sh\n" +
            "java -cp ${project.rootDir.absolutePath}/${dist}/${serviceJarFile}:${libClasspath} us.kbase.workspace.kbase.SchemaUpdaterCLI \$@\n")
    file("update_workspace_database_schema").setExecutable(true)
    // always run the script
    outputs.upToDateWhen { false }
}

task printDeps {
    doLast {
        def compileDeps = sourceSets.main.compileClasspath
        def runtimeDeps = sourceSets.main.runtimeClasspath
        def runtimeOnlyDeps = runtimeDeps.minus(compileDeps)
        runtimeOnlyDeps.each { println it }
    }
}

// spotless {
//     groovyGradle {
//         target "*.gradle" // default target of groovyGradle
//         greclipse()
//     }
// }
