/*
 * Gradle file for the KBase workspace_deluxe.
 */

plugins {
	id "java"
	id "war"
	id "jacoco"
}

group = "workspace service"
version = "0.14.1"

ext {
	clientJarFile = "WorkspaceClient.jar"
	serviceJarFile = "WorkspaceService.jar"
	warFile = "WorkspaceService.war"
	warXml = "war/web.xml"
	// directories
	src = "src"
	dist = "dist"
	jarDir = "../jars/lib/jars"
	downloadDir = "$buildDir/download"
	tempunpack = "$buildDir/tmp/unpackedjars"
	// other config
	kbaseCommonJar = "kbase-common-0.1.1.jar"
	testConfig = "test.cfg"
}

repositories {
	mavenCentral()
}

configurations {
	implementation
	testImplementation
	runtimeDeps {
		extendsFrom implementation
	}
	allDeps {
		extendsFrom implementation, testImplementation
	}
}

dependencies {
	implementation files("$jarDir/kbase/common/$kbaseCommonJar")
	implementation files("$jarDir/ini4j/ini4j-0.5.2.jar")
	implementation files("$jarDir/jetty/jetty-all-7.0.0.jar")
	implementation files("$jarDir/jna/jna-3.4.0.jar")
	implementation files("$jarDir/servlet/servlet-api-2.5.jar")
	implementation files("$jarDir/syslog4j/syslog4j-0.9.46.jar")
	implementation files("$jarDir/annotation/javax.annotation-api-1.3.2.jar")
	implementation files("$jarDir/junit/junit-4.12.jar")
	implementation files("$jarDir/hamcrest/hamcrest-core-1.3.jar")
	implementation files("$jarDir/kbase/common/kbase-common-0.1.1.jar")
	implementation files("$jarDir/joda/joda-time-2.2.jar")
	implementation files("$jarDir/kbase/auth/kbase-auth-0.4.4.jar")
	implementation files("$jarDir/jackson/jackson-annotations-2.9.9.jar")
	implementation files("$jarDir/jackson/jackson-core-2.9.9.jar")
	implementation files("$jarDir/jackson/jackson-databind-2.9.9.jar")
	implementation files("$jarDir/kbase/shock/shock-client-0.1.0.jar")
	implementation files("$jarDir/apache_commons/commons-logging-1.1.1.jar")
	implementation files("$jarDir/apache_commons/http/httpclient-4.5.9.jar")
	implementation files("$jarDir/apache_commons/http/httpcore-4.4.5.jar")
	implementation files("$jarDir/apache_commons/http/httpmime-4.5.8.jar")
	implementation files("$jarDir/kbase/kidl/kbase-kidl-parser-1409261812-7863aef.jar")
	implementation files("$jarDir/apache_commons/commons-codec-1.8.jar")
	implementation files("$jarDir/apache_commons/commons-io-2.4.jar")
	implementation files("$jarDir/apache_commons/commons-lang3-3.1.jar")
	implementation files("$jarDir/picocli/picocli-4.6.1.jar")
	implementation files("$jarDir/mongo/mongo-java-driver-3.12.10.jar")
	implementation files("$jarDir/slf4j/slf4j-api-1.7.30.jar")
	implementation files("$jarDir/logback/logback-core-1.1.2.jar")
	implementation files("$jarDir/logback/logback-classic-1.1.2.jar")
	implementation files("$jarDir/google/guava-14.0.1.jar")
	implementation files("$jarDir/caffeinecache/caffeine-2.9.3.jar")
	implementation files("$jarDir/kafka/kafka-clients-2.1.0.jar")
	implementation files("$jarDir/kbase/handle/AbstractHandleClient-1.0.0.jar")
	implementation files("$jarDir/kbase/sample/SampleServiceClient-0.1.1.jar")
	implementation files("$jarDir/amazon/V2/annotations-2.17.214.jar")
	implementation files("$jarDir/amazon/V2/arns-2.17.214.jar")
	implementation files("$jarDir/amazon/V2/auth-2.17.214.jar")
	implementation files("$jarDir/amazon/V2/aws-core-2.17.214.jar")
	implementation files("$jarDir/amazon/V2/aws-query-protocol-2.17.214.jar")
	implementation files("$jarDir/amazon/V2/aws-xml-protocol-2.17.214.jar")
	implementation files("$jarDir/amazon/V2/eventstream-1.0.1.jar")
	implementation files("$jarDir/amazon/V2/http-client-spi-2.17.214.jar")
	implementation files("$jarDir/amazon/V2/json-utils-2.17.214.jar")
	implementation files("$jarDir/amazon/V2/metrics-spi-2.17.214.jar")
	implementation files("$jarDir/amazon/V2/profiles-2.17.214.jar")
	implementation files("$jarDir/amazon/V2/protocol-core-2.17.214.jar")
	implementation files("$jarDir/amazon/V2/regions-2.17.214.jar")
	implementation files("$jarDir/amazon/V2/s3-2.17.214.jar")
	implementation files("$jarDir/amazon/V2/sdk-core-2.17.214.jar")
	implementation files("$jarDir/amazon/V2/third-party-jackson-core-2.17.214.jar")
	implementation files("$jarDir/amazon/V2/url-connection-client-2.17.214.jar")
	implementation files("$jarDir/amazon/V2/utils-2.17.214.jar")
	implementation files("$jarDir/reactivestreams/reactive-streams-1.0.3.jar")

	// TEST
	testImplementation files("$jarDir/apache_commons/commons-collections-3.2.1.jar")
	testImplementation files("$jarDir/apache_commons/commons-lang-2.4.jar")
	testImplementation files("$jarDir/apache_commons/velocity-1.7.jar")
	testImplementation files("$jarDir/arangodb/arangodb-java-driver-6.7.2.jar")
	testImplementation files("$jarDir/arangodb/velocypack-2.4.0.jar")
	testImplementation files("$jarDir/bytebuddy/byte-buddy-1.9.10.jar")
	testImplementation files("$jarDir/bytebuddy/byte-buddy-agent-1.9.10.jar")
	testImplementation files("$jarDir/equalsverifier/equalsverifier-3.1.10.jar")
	testImplementation files("$jarDir/jsemver/java-semver-0.9.0.jar")
	testImplementation files("$jarDir/kbase/auth2/kbase-auth2test-0.2.4.jar")
	testImplementation files("$jarDir/mockito/mockito-core-3.0.0.jar")
	testImplementation files("$jarDir/objenesis/objenesis-2.6.jar")
}

// download the KBase jars if they aren't already present
task downloadJars {
	doLast {
		def dir = file(downloadDir)
		if (!dir.exists()) {
			dir.mkdirs()
		}
		def url = "https://github.com/kbase/jars/raw/master/lib/jars/kbase"
		def jars = [
			"auth/kbase-auth-0.4.4.jar",
			"auth2/kbase-auth2test-0.2.4.jar",
			"common/$kbaseCommonJar",
			"handle/AbstractHandleClient-1.0.0.jar",
			"kidl/kbase-kidl-parser-1409261812-7863aef.jar",
			"sample/SampleServiceClient-0.1.1.jar",
			"shock/shock-client-0.1.0.jar"
		]
		jars.each { jar ->
			def jarName = jar.split("/")[-1]
			def file = file("$downloadDir/$jarName")
			if (!file.exists()) {
				ant.get(src: "$url/$jarName", dest: "$downloadDir/$jarName")
			}
		}
	}
}

// Custom java project layout
sourceSets {
	main {
		java {
			srcDir src
			exclude "**/test/**"
		}
	}
	test {
		java {
			srcDir src
		}
		resources {
			srcDir src
			include "**/*.properties"
			include "**/*.cfg"
			include "**/*.spec"
			include "**/*.instance.*"
			include "**/instance.*"
			include "**/*.instance"
			include "**/*.html"
			include "**/*.css"
			include "**/*.gif"
			include "**/*.js"
			include "**/*.png"
			include "**/*.txt"
			include "**/*.weirdsuffix"
		}
	}
}

tasks.withType(JavaCompile) {
	classpath = configurations.allDeps
	options.compilerArgs = ["-source", "11", "-target", "11", "-g"]
}

task clientJar(type: Jar, dependsOn: compileJava) {
	from sourceSets.main.output
	include "us/kbase/workspace/*.class"
	exclude "us/kbase/workspace/WorkspaceServer.class"
	include "us/kbase/common/service/*.class"
	exclude "us/kbase/common/service/JsonServer*"
	archiveFileName = clientJarFile
	destinationDirectory = file("$dist/client")
}

task serviceJar(type: Jar, dependsOn: compileJava) {
	from sourceSets.main.output
	archiveFileName = serviceJarFile
	destinationDirectory = file("$dist")
}

task buildJars {
	dependsOn serviceJar, clientJar
}

task unzipJar(type: Copy) {
	from zipTree("$jarDir/kbase/common/$kbaseCommonJar")
	into "$tempunpack"
}

// by default, the files go into build/docs/javadoc
tasks.javadoc {
	dependsOn unzipJar
	classpath = configurations.allDeps
	failOnError = false
	options {
		author = false
		noDeprecated = false
		noDeprecatedList = false
		noIndex = false
		noNavBar = false
		noTree = false
		splitIndex = true
		use = true
		version = true
		links = [
			"http://download.oracle.com/javase/11/docs/api/",
			"https://www.javadoc.io/doc/com.fasterxml.jackson.core/jackson-core/2.9.9/",
			"https://www.javadoc.io/doc/com.fasterxml.jackson.core/jackson-databind/2.9.9/"
		]
	}
	source = fileTree(dir: "$src/us/kbase",
	include: [
		"workspace/*.java",
		"common/service/*.java"
	],
	exclude: [
		"workspace/WorkspaceServer.java",
		"common/service/JsonServer*",
		"common/service/JacksonTupleModule.java",
		"common/service/JsonClientCaller.java",
		"common/service/JsonTreeTraversingParser.java",
		"common/service/KBaseJsonParser.java"
	])
	source += fileTree(dir: "$tempunpack/us/kbase/common/service", include: [
		"UObject.java",
		"JsonTokenStream.java",
		"*Exception.java"
	])

	doLast {
		delete "$tempunpack"
	}
}

tasks.war {
	dependsOn javadoc
	description = "Build the WAR file. Assumes compilation has been run."
	archiveFileName = warFile
	destinationDirectory = file("$dist")

	// location of the web.xml file
	webXml = file("$warXml")

	duplicatesStrategy "exclude"

	// add the dependencies to lib
	into("WEB-INF/lib") {
		from sourceSets.main.compileClasspath
	}
	// copy the compiled classes over
	into("WEB-INF/classes") {
		from sourceSets.main.output.classesDirs
	}
	// copy in the documentation
	into("WEB-INF/classes/server_docs/javadoc") {
		from javadoc.destinationDir
	}
}

task expandWar(type: Copy) {
	from zipTree("$dist/$warFile")
	into "war_contents"
}

// test reports are saved to build/reports/tests/<testName>
tasks.withType(Test) {
	dependsOn compileTestJava
	useJUnit()
	systemProperty "test.cfg", testConfig
	maxHeapSize = "3G"
	testLogging {
		events "passed", "skipped", "failed"
		exceptionFormat "short"
		showStandardStreams = true
		showExceptions = true
		showCauses = true
	}
}

task testNoLongTests(type: Test) {
	description = "run all tests except the slow tests"
	systemProperty "test.cfg", testConfig
	forkEvery 1
	filter {
		excludeTestsMatching "*LongTest"
		// gradle thinks that classes annotated with @RunWith
		// are tests
		excludeTestsMatching "*Tester"
	}
}

// output from coverage tasks is saved to build/reports/jacoco/<testName>
tasks.withType(JacocoReport) {
	reports {
		html.required = true
		xml.required = true
		csv.required = true
	}
	sourceSets sourceSets.main
}

task coverageNoLongTests(type: JacocoReport, dependsOn: testNoLongTests) {
	group = "Reporting"
	description = "Generate code coverage reports for all tests except the slow tests"
	executionData(testNoLongTests)
}

task createScript {
	dependsOn compileJava
	description = "create cli script"

	def runtimeClasspath = configurations.runtimeDeps.files.join(":")
	file("update_workspace_database_schema").write("#!/bin/sh\n" +
			"java -cp ${project.rootDir.absolutePath}/$dist/$serviceJarFile:$runtimeClasspath us.kbase.workspace.kbase.SchemaUpdaterCLI \$@\n")
	file("update_workspace_database_schema").setExecutable(true)
	// always run the script
	outputs.upToDateWhen { false }
}
