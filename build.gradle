/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.4.2/samples
 */

plugins {
	id 'java'
	id 'war'
	id 'jacoco'
}

repositories {
	mavenCentral()
}

compileJava {
	options.release = 8
}

test {
	systemProperty "test.cfg", "./test.cfg"
	maxHeapSize = "3G"
}

// Custom java project layout
sourceSets {
	main {
		java {
			srcDirs = ['src']
			exclude '**/test/**'
		}
	}
	test {
		java {
			srcDirs = ['src']
			include '**/test/**'
			exclude '*Tester.java'
		}
	}
}

war {
	webXml = file('war/web.xml')
}

def fromURL = { url, name ->
	File file = new File("$buildDir/download/${name}.jar")
	file.parentFile.mkdirs()
	if (!file.exists()) {
		new URL(url).withInputStream { downloadStream ->
			file.withOutputStream { fileOut ->
				fileOut << downloadStream
			}
		}
	}
	files(file.absolutePath)
}

dependencies {

	// ### General application dependencies ###

	implementation fromURL(
		'https://github.com/kbase/jars/raw/master/lib/jars/kbase/auth/kbase-auth-0.4.4.jar',
		'kbase-auth-0.4.4'
	)
	implementation fromURL(
		'https://github.com/kbase/jars/raw/master/lib/jars/kbase/kidl/kbase-kidl-parser-1409261812-7863aef.jar',
		'kbase-kidl-parser-1409261812-7863aef'
	)
	implementation 'com.fasterxml.jackson.core:jackson-annotations:2.9.9'
	implementation 'com.fasterxml.jackson.core:jackson-core:2.9.9'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.9'
	implementation 'org.ini4j:ini4j:0.5.2'
	implementation 'commons-io:commons-io:2.4'
	implementation 'org.apache.commons:commons-lang3:3.1'
	implementation 'commons-codec:commons-codec:1.8'
	implementation 'info.picocli:picocli:4.6.1'
	implementation 'org.mongodb:mongo-java-driver:3.12.10'
	implementation 'org.slf4j:slf4j-api:1.7.30'
	implementation 'ch.qos.logback:logback-classic:1.1.2'
	implementation 'com.google.guava:guava:14.0.1'
	implementation 'com.github.ben-manes.caffeine:caffeine:2.9.3'
	implementation 'org.apache.kafka:kafka-clients:2.1.0'
	implementation fromURL(
		'https://github.com/kbase/jars/raw/master/lib/jars/kbase/handle/AbstractHandleClient-1.0.0.jar',
		'AbstractHandleClient-1.0.0'
	)
	implementation fromURL(
		'https://github.com/kbase/jars/raw/master/lib/jars/kbase/sample/SampleServiceClient-0.1.1.jar',
		'SampleServiceClient-0.1.1'
	)
	
	// ### Server dependencies, specifically for java_common JsonServerServlet ###
	
	implementation fromURL(
		'https://github.com/kbase/jars/raw/master/lib/jars/kbase/common/kbase-common-0.1.0.jar',
		'kbase-common-0.1.0'
	)
	// joda-time is only required for kbase-common. Would be nice to remove
	implementation 'joda-time:joda-time:2.2'
	// this is OOOOOOLD. But that probably means updating java_common
	implementation 'org.eclipse.jetty.aggregate:jetty-all:7.0.0.v20091005'
	implementation 'javax.servlet:servlet-api:2.5'
	// Syslog4j 0.9.46 doesn't appear to be available on Maven. It apparently lives in 
	// a JetBrains artifact server, but that's too much trouble and there's only one version there
	// anyway.
	// https://mvnrepository.com/artifact/org.jetbrains/syslog4j/0.9.46
	// Need to rework the java common logger to not use syslog4j at all since it's abandonware
	// and has a ton of CVEs, even in the newer versions.
	// The old ant file used to specify a JNA jar which is listed as optional in Maven, and since
	// the workspace doesn't actually talk to syslog anymore, is unnecessary.
	implementation fromURL(
		'https://github.com/kbase/jars/raw/master/lib/jars/syslog4j/syslog4j-0.9.46.jar',
		'syslog4j-0.9.46'
	)
	implementation 'javax.annotation:javax.annotation-api:1.3.2'
	
	// ### Blobstore / Shock client and dependencies ###
	
	implementation fromURL(
		'https://github.com/kbase/jars/raw/master/lib/jars/kbase/shock/shock-client-0.1.0.jar',
		'shock-client-0.1.0'
	)
	implementation 'org.apache.httpcomponents:httpclient:4.5.9'
	implementation 'org.apache.httpcomponents:httpmime:4.5.8'

	// ### Amazon S3 ###
	
	implementation('software.amazon.awssdk:s3:2.17.214') {
		exclude module: 'apache-client'
		exclude module: 'netty-nio-client'
	}
	implementation 'software.amazon.awssdk:url-connection-client:2.17.214'
	
	// ### Test ###
	
	testImplementation 'junit:junit:4.12'
	testImplementation 'org.hamcrest:hamcrest-core:1.3'
	testImplementation 'com.github.zafarkhaja:java-semver:0.9.0'
	testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.1.10'
	// TODO will want to upgrade auth2 to gradle at some point.
	// How will the proper jars and templates zip file be built for tests here?
	// Ideal is to no longer use the github jars repo anywhere.
	// The auth2test code pulling in a gradle file and building seems a little nuts
	// Maybe clone the auth repo, build, and put the build folder into test.cfg here?
	testImplementation fromURL(
		'https://github.com/kbase/jars/raw/master/lib/jars/kbase/auth2/kbase-auth2test-0.2.4.jar',
		'kbase-auth2test-0.2.4'
	)
	testImplementation 'com.arangodb:arangodb-java-driver:6.7.2'
	testImplementation 'org.mockito:mockito-core:3.0.0'
}

