name: KBase Workspace tests

on:
    pull_request:
        types:
            - opened
            - reopened
            - synchronize
            - ready_for_review
    push:
        # run workflow when merging to main or develop
        branches:
            - main
            - master
            - develop

# TODO find out what minio ver we're using in CI / appdev / prod and use that
# TODO split tests into mongo related & non mongo related. Run the former once.
jobs:
    workspace_container_tests:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3

            - name: Set up Python 3.10
              uses: actions/setup-python@v3
              with:
                  python-version: "3.10"

            - name: Install dependencies and set up test config
              shell: bash
              run: |
                  # set up python dependencies
                  pip install pytest requests sphinx

            - name: Run tests
              shell: bash
              run: |
                  sh scripts/run_tests.sh

    workspace_deluxe_tests:
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-22.04] #, ubuntu-20.04, ubuntu-18.04]
                mongo: ["3.6.13", "3.6.23"]
                test_cmd: ["LongTests", "NoLongTests", "test_quick_coverage"]

        runs-on: ${{ matrix.os }}

        steps:
            - name: set up environment
              uses: kbase/workspace_deluxe/.github/workflows/test_set_up.yml
              with:
                  cache-token: ${{ secrets.GITHUB_TOKEN }}
                  os: ${{ matrix.os }}
                  mongo: ${{ matrix.mongo }}

            - name: restore dependencies from cache
              uses: actions/cache@v3
              with:
                  path: |
                      ${{ github.workspace }}
                  key: deps-${{ matrix.os }}-${{ matrix.mongo }}-${{ hashFiles('.github/workflows/test_set_up.yml') }}

            - name: build the war file (requires compileJava, javadoc)
              run: ./gradlew war --info

            - name: run the ${{matrix.test_cmd}} tests and generate coverage
              run: |
                  mkdir test-reports
                  if [ "${{matrix.test_cmd}}" = "test_quick_coverage" ]; then
                    ant "${{matrix.test_cmd}}"
                  else
                    ./gradlew "coverage${{matrix.test_cmd}}" --info
                  fi

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v3
              if: matrix.test_cmd == 'test_quick_coverage'
              with:
                  fail_ci_if_error: true

            - name: upload jacoco report
              uses: actions/upload-artifact@v3
              if: matrix.test_cmd != 'test_quick_coverage'
              with:
                  name: coverage${{matrix.test_cmd}}-${{matrix.mongo}}.exec
                  path: build/
                  if-no-files-found: warn
